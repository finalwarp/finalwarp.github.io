!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s="8SHQ")}({"8SHQ":function(e,t,s){"use strict";s.r(t);const i={black:0,white:16777215,red:16711680,green:39168,blue:3355647,gold:16766720,lightGray:14540253,darkGray:11184810,cardLevel1:17442,cardLevel2:16737792,cardLevel3:3355545,menu:14015451,board:8093053,startScreen:14015451,endScreen:14015451,buttons:{down:"#000077",over:"#0022BB",out:"#0044DD",disabledOver:"#BBBBBB",disabledFill:"#000000"}},r={titleText:{font:"54px Waree, Verdana",color:"#000000"},infoText:{font:"24px Waree, Verdana",color:"#000000",wordWrap:{width:900,useAdvancedWrap:!0}},endScreen:{title:{font:"24px Waree, Verdana",color:"#000000",wordWrap:{width:900,useAdvancedWrap:!0}},summary:{font:"18px Waree, Verdana",color:"#000000"}},cardCosts:{font:"26px Waree, Verdana",color:"#FFFFFF",align:"center",stroke:"#000000",strokeThickness:4},cardPoints:{font:"30px Waree, Verdana",color:"#000000",align:"center"},nobleCosts:{font:"24px Waree, Verdana",color:"#FFFFFF",align:"center",stroke:"#000000",strokeThickness:4},noblePoints:{font:"30px Waree, Verdana",color:"#000000",align:"center"},buttons:{font:"22px Waree, Verdana",color:"#FFFFFF"},menuText:{font:"18px Waree, Verdana",color:"#000000",wordWrap:{width:440,useAdvancedWrap:!0}},playerInfo:{name:{font:"22px Waree, Verdana",color:"#000000"},points:{font:"24px Waree, Verdana",color:"#000000"},cost:{font:"26px Waree, Verdana",color:"#FFFFFF",stroke:"#000000",strokeThickness:4}}};class n extends Phaser.GameObjects.Text{constructor(e,t,s,i,n=180){super(e,t,s,i,r.buttons),this.maxWidth=n,this.isDisabled=!1,this.setOrigin(.5),this.setDisabled(!1),this.updatePadding(),this.setInteractive(),e.add.existing(this),this.on("pointerover",this.over,this),this.on("pointerout",this.out,this),this.on("pointerup",this.up,this),this.on("pointerdown",this.down,this)}updatePadding(){this.setPadding(0,0,0,0);const e=Math.abs(this.maxWidth-this.width),t={left:e/2,top:4,right:e/2,bottom:4};this.setPadding(t)}setText(e){this.text!==e&&(super.setText(e),this.updatePadding())}over(e,t,s,r){this.isDisabled||this.setBackgroundColor(i.buttons.over)}out(e,t){this.isDisabled||this.setBackgroundColor(i.buttons.out)}up(e,t,s,r){this.isDisabled||this.setBackgroundColor(i.buttons.over)}down(e,t,s,r){this.isDisabled||this.setBackgroundColor(i.buttons.down)}removeAllListeners(){super.removeAllListeners(),this.on("pointerover",this.over,this),this.on("pointerout",this.out,this),this.on("pointerup",this.up,this),this.on("pointerdown",this.down,this)}setDisabled(e){this.isDisabled=e,this.isDisabled?(this.setBackgroundColor(i.buttons.disabledOver),this.setFill(i.buttons.disabledFill)):(this.setBackgroundColor(i.buttons.out),this.setFill(r.buttons.color))}}class h extends Phaser.Scene{constructor(){super({key:"StartScreen",active:!0}),this.title=null,this.info=null,this.startGameButton=null,this.viewRulesButton=null,this.twoPlayersButton=null,this.threePlayersButton=null,this.fourPlayersButton=null,this.inputFields=null,this.nameField1=null,this.nameField2=null,this.nameField3=null,this.nameField4=null,this.pointsToWinField=null,this.rulesPageIndex=0,this.rulesList=[],this.previousRulesButton=null,this.nextRulesButton=null,this.backButton=null}preload(){this.cache.html.remove("startScreenForm"),this.load.path="src/assets/",this.load.html("startScreenForm","html/startScreenForm.html"),this.cache.text.remove("rules1"),this.cache.text.remove("rules2"),this.cache.text.remove("rules3"),this.cache.text.remove("rules4"),this.cache.text.remove("rules5"),this.cache.text.remove("rules6"),this.load.text("rules1","text/rules1.txt"),this.load.text("rules2","text/rules2.txt"),this.load.text("rules3","text/rules3.txt"),this.load.text("rules4","text/rules4.txt"),this.load.text("rules5","text/rules5.txt"),this.load.text("rules6","text/rules6.txt")}create(){const e=game.config.width,t=game.config.height,s=this.add.rectangle(0,0,e,t);s.setFillStyle(i.startScreen,1),s.setOrigin(0),this.title=this.add.text(e/2,t/6,"PhaserSplendor",r.titleText),this.title.setOrigin(.5),this.info=this.add.text(e/2,t/3,"",r.infoText),this.info.setOrigin(.5,0),this.startGameButton=new n(this,e/2,t/2,"Start"),this.viewRulesButton=new n(this,e/2,2.5*t/4,"Rules"),this.viewRulesButton.on("pointerup",function(e){this.drawRulesScreen()},this),this.twoPlayersButton=new n(this,e/2-75,t/2,"2",50),this.twoPlayersButton.on("pointerup",function(e){this.drawNamePlayersScreen(2)},this),this.threePlayersButton=new n(this,e/2,t/2,"3",50),this.threePlayersButton.on("pointerup",function(e){this.drawNamePlayersScreen(3)},this),this.fourPlayersButton=new n(this,e/2+75,t/2,"4",50),this.fourPlayersButton.on("pointerup",function(e){this.drawNamePlayersScreen(4)},this),this.inputFields=this.add.dom(e/2,2.5*t/4).createFromCache("startScreenForm"),this.nameField1=this.inputFields.getChildByID("nameField1"),this.nameField2=this.inputFields.getChildByID("nameField2"),this.nameField3=this.inputFields.getChildByID("nameField3"),this.nameField4=this.inputFields.getChildByID("nameField4"),this.pointsToWinField=this.inputFields.getChildByID("points"),this.rulesList=[this.cache.text.get("rules1"),this.cache.text.get("rules2"),this.cache.text.get("rules3"),this.cache.text.get("rules4"),this.cache.text.get("rules5"),this.cache.text.get("rules6")],this.previousRulesButton=new n(this,e/2-200,3.5*t/4,"Previous"),this.previousRulesButton.on("pointerup",function(e){this.rulesPageIndex>0&&this.rulesPageIndex--,this.info.setText(this.rulesList[this.rulesPageIndex]),this.previousRulesButton.setDisabled(0===this.rulesPageIndex),this.nextRulesButton.setDisabled(this.rulesPageIndex===this.rulesList.length-1)},this),this.nextRulesButton=new n(this,e/2,3.5*t/4,"Next"),this.nextRulesButton.on("pointerup",function(e){this.rulesPageIndex<this.rulesList.length-1&&this.rulesPageIndex++,this.info.setText(this.rulesList[this.rulesPageIndex]),this.previousRulesButton.setDisabled(0===this.rulesPageIndex),this.nextRulesButton.setDisabled(this.rulesPageIndex===this.rulesList.length-1)},this),this.backButton=new n(this,e/2+200,3.5*t/4,"Back To Title"),this.backButton.on("pointerup",function(e){this.drawStartScreen()},this),this.drawStartScreen()}drawStartScreen(){this.info.setVisible(!0),this.twoPlayersButton.setVisible(!1),this.threePlayersButton.setVisible(!1),this.fourPlayersButton.setVisible(!1),this.inputFields.setVisible(!1),this.startGameButton.setVisible(!0),this.viewRulesButton.setVisible(!0),this.previousRulesButton.setVisible(!1),this.nextRulesButton.setVisible(!1),this.backButton.setVisible(!1),this.info.setText("Splendor made in the Phaser 3 framework.");const e=game.config.width,t=game.config.height;this.startGameButton.setPosition(e/2,t/2),this.viewRulesButton.setPosition(e/2,2.5*t/4),this.startGameButton.removeAllListeners(),this.startGameButton.on("pointerup",function(e){this.drawSelectPlayersScreen()},this)}drawRulesScreen(){this.info.setVisible(!0),this.twoPlayersButton.setVisible(!1),this.threePlayersButton.setVisible(!1),this.fourPlayersButton.setVisible(!1),this.inputFields.setVisible(!1),this.startGameButton.setVisible(!1),this.viewRulesButton.setVisible(!1),this.previousRulesButton.setVisible(!0),this.nextRulesButton.setVisible(!0),this.backButton.setVisible(!0),this.rulesPageIndex=0,this.info.setText(this.rulesList[this.rulesPageIndex]),this.previousRulesButton.setDisabled(0===this.rulesPageIndex),this.nextRulesButton.setDisabled(this.rulesPageIndex===this.rulesList.length-1)}drawSelectPlayersScreen(){this.info.setVisible(!0),this.twoPlayersButton.setVisible(!0),this.threePlayersButton.setVisible(!0),this.fourPlayersButton.setVisible(!0),this.inputFields.setVisible(!1),this.startGameButton.setVisible(!1),this.viewRulesButton.setVisible(!1),this.previousRulesButton.setVisible(!1),this.nextRulesButton.setVisible(!1),this.backButton.setVisible(!1),this.info.setText("Select Number of Players")}drawNamePlayersScreen(e){this.info.setVisible(!0),this.twoPlayersButton.setVisible(!1),this.threePlayersButton.setVisible(!1),this.fourPlayersButton.setVisible(!1),this.inputFields.setVisible(!0),this.startGameButton.setVisible(!0),this.viewRulesButton.setVisible(!1),this.previousRulesButton.setVisible(!1),this.nextRulesButton.setVisible(!1),this.backButton.setVisible(!1),this.info.setText("Enter your names and points to win (or click Start using default values)"),this.nameField1.hidden=!1,this.nameField2.hidden=!1,this.nameField3.hidden=e<3,this.nameField4.hidden=e<4,this.startGameButton.removeAllListeners(),this.startGameButton.y=3.5*game.config.height/4,this.startGameButton.on("pointerup",function(t){this.startGame(e,[this.nameField1.value,this.nameField2.value,this.nameField3.value,this.nameField4.value],this.pointsToWinField.value)},this)}startGame(e,t,s){s=0===s.length?15:parseInt(s,10);for(let s=0;s<e;s++)0===t[s].length&&(t[s]="Player "+(s+1));t.splice(e,4),this.scene.start("Board",{names:t,pointsToWin:s})}}const a=20,o=55,l=25,d=42,c=a+o,u=a+3*o+5,p=a+3*o+35,C=l+d,g=l+2*d,b={x:315,xDist:100,y:80,yDist:140},y=b.x,x=b.x+b.xDist,m=b.x+2*b.xDist,w=b.x+3*b.xDist,v=b.x+4*b.xDist,k=b.y,T=b.y+b.yDist,S=b.y+2*b.yDist,f={x:500+b.x,y:50,yDist:68},P={x:75+f.x+50,y:55,yDist:80},M={col0:275+2*f.yDist,col1:275+3*f.yDist,col2:275+4*f.yDist,col3:275+5*f.yDist,col4:275+6*f.yDist,col5:275+7*f.yDist,row0:b.y+3*b.yDist+30},B={summaryX:40,summaryY:150,cardX:75,cardY:350,nobleX:275},R={window:{x:5,y:5},playerInfo:{yOffset:150,name:{x:8,y:l},black:{x:a,y:C},white:{x:c,y:C},red:{x:a+2*o,y:C},green:{x:a,y:g},blue:{x:c,y:g},gold:{x:a+2*o+25,y:g},points:{x:p,y:l},reserve1:{x:u,y:C},reserve2:{x:p,y:C},reserve3:{x:u,y:g}},card1x0:{x:y,y:S},card1x1:{x:x,y:S},card1x2:{x:m,y:S},card1x3:{x:w,y:S},card1x4:{x:v,y:S},card2x0:{x:y,y:T},card2x1:{x:x,y:T},card2x2:{x:m,y:T},card2x3:{x:w,y:T},card2x4:{x:v,y:T},card3x0:{x:y,y:k},card3x1:{x:x,y:k},card3x2:{x:m,y:k},card3x3:{x:w,y:k},card3x4:{x:v,y:k},chip:{black:{x:f.x,y:f.y},white:{x:f.x,y:f.y+f.yDist},red:{x:f.x,y:f.y+2*f.yDist},green:{x:f.x,y:f.y+3*f.yDist},blue:{x:f.x,y:f.y+4*f.yDist},gold:{x:f.x,y:f.y+5*f.yDist}},chipCount:{black:{x:f.x+50,y:f.y},white:{x:f.x+50,y:f.y+f.yDist},red:{x:f.x+50,y:f.y+2*f.yDist},green:{x:f.x+50,y:f.y+3*f.yDist},blue:{x:f.x+50,y:f.y+4*f.yDist},gold:{x:f.x+50,y:f.y+5*f.yDist}},noble:{pos0:{x:P.x,y:P.y},pos1:{x:P.x,y:P.y+P.yDist},pos2:{x:P.x,y:P.y+2*P.yDist},pos3:{x:P.x,y:P.y+3*P.yDist},pos4:{x:P.x,y:P.y+4*P.yDist}},inGameMenu:{x:265,y:S+b.yDist/2},cardPos:{x:y,y:0},chipPos0:{x:y,y:0},chipPos1:{x:x,y:0},chipPos2:{x:m,y:0},chipMenu:{pos0:{x:M.col0,y:M.row0},pos1:{x:M.col1,y:M.row0},pos2:{x:M.col2,y:M.row0},pos3:{x:M.col3,y:M.row0},pos4:{x:M.col4,y:M.row0},pos5:{x:M.col5,y:M.row0}},chipMenuCount:{pos0:{x:M.col0,y:M.row0+50},pos1:{x:M.col1,y:M.row0+50},pos2:{x:M.col2,y:M.row0+50},pos3:{x:M.col3,y:M.row0+50},pos4:{x:M.col4,y:M.row0+50},pos5:{x:M.col5,y:M.row0+50}},endScreen:{titleY:75,summary:{x:B.summaryX,y:B.summaryY},card:{x:B.cardX,y:B.cardY},nobleX:B.nobleX}};class I{static convertChipsToColorJson(e){const t={black:0,white:0,red:0,green:0,blue:0,gold:0};return e.forEach(function(e){switch(e.color){case"black":t.black++;break;case"white":t.white++;break;case"red":t.red++;break;case"green":t.green++;break;case"blue":t.blue++;break;case"gold":t.gold++}},this),t}static addChipsToColorJson(e,t){const s=I.convertChipsToColorJson(e);return t.black+=s.black,t.white+=s.white,t.red+=s.red,t.green+=s.green,t.blue+=s.blue,t.gold+=s.gold,t}static subtractChipsToColorJson(e,t){const s=I.convertChipsToColorJson(e);return t.black-=s.black,t.white-=s.white,t.red-=s.red,t.green-=s.green,t.blue-=s.blue,t.gold-=s.gold,t}static copyColorJson(e){return{black:e.black,white:e.white,red:e.red,green:e.green,blue:e.blue,gold:e.gold}}static addColorJson(e,t){return t.black+=e.black,t.white+=e.white,t.red+=e.red,t.green+=e.green,t.blue+=e.blue,t.gold+=e.gold,t}static subtractColorJson(e,t){return t.black-=e.black,t.white-=e.white,t.red-=e.red,t.green-=e.green,t.blue-=e.blue,t.gold-=e.gold,t}static getColorCode(e){let t=i.black;switch(e){case"black":t=i.black;break;case"white":t=i.white;break;case"red":t=i.red;break;case"green":t=i.green;break;case"blue":t=i.blue;break;case"gold":t=i.gold}return t}static shuffleList(e){let t=e.length,s=0,i=0;for(;0!==t;)i=Math.floor(Math.random()*t),s=e[t-=1],e[t]=e[i],e[i]=s;return e}}const D={cardX:85,cardY:125,topY:34,costCircleRadius:15,costBorderOffset:2,symbolShapeData:[0,20,5,15,15,15,20,20,10,30],symbolLine1:[8,15,5,20,10,30,15,20,12,15],symbolLine2:[0,20,20,20],symbolScale:1.3,symbolStroke:1.5,textStroke:4,borderStrokeOut:2,borderStrokeOver:4};class E extends Phaser.GameObjects.Container{constructor(e,t,s,i=!0){super(e,t.x,t.y),this.startCoordinates=t,this.border=null,this.cardJson=s,this.isFaceUp=i,i?this.drawFaceUp():this.drawFaceDown(),this.setSize(D.cardX,D.cardY),this.addInputs(),this.setInteractive(),e.add.existing(this)}get coordinates(){return{x:this.x,y:this.y}}flipCard(){this.isFaceUp=!this.isFaceUp,this.isFaceUp?this.drawFaceUp():this.drawFaceDown()}drawFaceDown(){let e=i.cardLevel1;2===this.cardJson.level?e=i.cardLevel2:3===this.cardJson.level&&(e=i.cardLevel3);const t=this.scene.add.rectangle(0,0,D.cardX,D.cardY,e);this.add(t),1===this.cardJson.level?this.drawSymbol(t.x,t.y,i.gold):2===this.cardJson.level?(this.drawSymbol(t.x,t.y-t.height/5,i.gold),this.drawSymbol(t.x,t.y+t.height/5,i.gold)):3===this.cardJson.level&&(this.drawSymbol(t.x,t.y-t.height/3,i.gold),this.drawSymbol(t.x,t.y,i.gold),this.drawSymbol(t.x,t.y+t.height/3,i.gold));const s=[0,0,0,t.height,.75*t.width,t.height,.75*t.width,0],r=this.scene.add.polygon(0,0,s);r.setStrokeStyle(D.borderStrokeOut,i.black),this.add(r);const n=[0,0,0,t.height,t.width,t.height,t.width,0];this.border=this.scene.add.polygon(0,0,n),this.border.setStrokeStyle(D.borderStrokeOut,i.black),this.add(this.border)}drawFaceUp(){const e=[],t=[];0!==this.cardJson.cost.black&&(e.push(i.black),t.push(this.cardJson.cost.black)),0!==this.cardJson.cost.white&&(e.push(i.white),t.push(this.cardJson.cost.white)),0!==this.cardJson.cost.red&&(e.push(i.red),t.push(this.cardJson.cost.red)),0!==this.cardJson.cost.green&&(e.push(i.green),t.push(this.cardJson.cost.green)),0!==this.cardJson.cost.blue&&(e.push(i.blue),t.push(this.cardJson.cost.blue));const s=I.getColorCode(this.cardJson.color),n=this.scene.add.rectangle(0,0,D.cardX,D.cardY,s);this.add(n);const h=this.scene.add.rectangle(n.x,n.getTopRight().y+D.topY/2,n.width,D.topY,i.lightGray);this.add(h),this.drawCost(n.getTopLeft().x+n.width/4,h.getBottomRight().y+(n.height-h.height)/4,e[0],t[0]),e.length>=2&&this.drawCost(n.getTopLeft().x+n.width/4,h.getBottomRight().y+(n.height-h.height)/4*3,e[1],t[1]),e.length>=3&&this.drawCost(n.getTopLeft().x+n.width/4*3,h.getBottomRight().y+(n.height-h.height)/4,e[2],t[2]),4===e.length&&this.drawCost(n.getTopLeft().x+n.width/4*3,h.getBottomRight().y+(n.height-h.height)/4*3,e[3],t[3]);const a=this.scene.add.text(n.getTopLeft().x+n.width/4,h.y,this.cardJson.points,r.cardPoints);a.setOrigin(.5),this.add(a),this.drawSymbol(n.getTopLeft().x+n.width/4*3,h.y,s);const o=[0,0,0,n.height,n.width,n.height,n.width,0];this.border=this.scene.add.polygon(0,0,o),this.border.setStrokeStyle(D.borderStrokeOut,i.black),this.add(this.border)}drawCost(e,t,s,n){const h=this.scene.add.circle(e,t,D.costCircleRadius,s),a=this.scene.add.circle(e,t,D.costCircleRadius+D.costBorderOffset,i.white),o=this.scene.add.circle(e,t,D.costCircleRadius+2*D.costBorderOffset,i.black),l=this.scene.add.text(h.x,h.y,n,r.cardCosts);l.setOrigin(.5),this.add(o),this.add(a),this.add(h),this.add(l)}drawSymbol(e,t,s){const r=this.scene.add.polygon(e,t,D.symbolShapeData,s);r.setScale(D.symbolScale),r.y-=r.displayHeight,r.setStrokeStyle(D.symbolStroke,i.black),this.add(r)}addInputs(){this.removeInputs(),this.on("pointerover",this.over,this),this.on("pointerout",this.out,this),this.on("pointerup",this.up,this)}removeInputs(){this.off("pointerover"),this.off("pointerout"),this.off("pointerup")}over(e,t,s,r){this.border.setStrokeStyle(D.borderStrokeOver,i.black)}out(e,t){this.border.setStrokeStyle(D.borderStrokeOut,i.black)}up(e,t,s,i){this.scene.events.emit("clickCard",this)}}const _={length:75,costHeight:25,costWidth:35,borderStroke:2};class A extends Phaser.GameObjects.Container{constructor(e,t,s){super(e,t.x,t.y),this.nobleJson=s,this.drawNoble(),e.add.existing(this)}get coordinates(){return{x:this.x,y:this.y}}drawNoble(){const e=this.scene.add.rectangle(0,0,_.length,_.length,i.darkGray);e.setStrokeStyle(_.borderStroke,i.black),this.add(e);const t=e.getTopLeft().x,s=e.getTopLeft().y,n=[{x:t,y:s+_.length/3-_.costHeight},{x:t,y:s+2*_.length/3-_.costHeight-_.borderStroke/2},{x:t,y:s+_.length-_.costHeight-_.borderStroke/2}];let h=0;this.nobleJson.cost.white>0&&this.drawCost(n[h++],this.nobleJson.cost.white,i.white),this.nobleJson.cost.blue>0&&this.drawCost(n[h++],this.nobleJson.cost.blue,i.blue),this.nobleJson.cost.green>0&&this.drawCost(n[h++],this.nobleJson.cost.green,i.green),this.nobleJson.cost.red>0&&this.drawCost(n[h++],this.nobleJson.cost.red,i.red),this.nobleJson.cost.black>0&&this.drawCost(n[h++],this.nobleJson.cost.black,i.black);const a=this.scene.add.text(e.getBottomRight().x-6,e.getBottomRight().y-2,this.nobleJson.points,r.noblePoints);a.setOrigin(1),this.add(a)}drawCost(e,t,s){const n=this.scene.add.rectangle(e.x,e.y,_.costWidth,_.costHeight,s);n.setStrokeStyle(_.borderStroke,i.black),n.setOrigin(0),this.add(n);const h=this.scene.add.text(n.getCenter().x,n.getCenter().y,t,r.nobleCosts);h.setOrigin(.5),this.add(h)}}const L={cardXDist:45,cardYDist:140,nobleXDist:100};class J extends Phaser.Scene{constructor(){super({key:"EndScreen",active:!1,visible:!1}),this.title=null,this.summary=null,this.backToStartScreenButton=null,this.playerManager=null,this.gameObjects=[]}init(e){this.playerManager=e.playerManager}create(){const e=game.config.width,t=game.config.height,s=this.add.rectangle(0,0,e,t);s.setFillStyle(i.startScreen,1),s.setOrigin(0);const h=this.playerManager.getWinners().map(function(e){return e.name}).join(", ");this.title=this.add.text(e/2,R.endScreen.titleY,`Congratulations ${h}`,r.endScreen.title),this.title.setOrigin(.5,0),this.summary=this.add.text(R.endScreen.summary.x,R.endScreen.summary.y,"Click on a player's name to view their summary.",r.endScreen.summary),this.player1Button=new n(this,e/2-300,t-50,this.playerManager.players[0].name),this.player1Button.on("pointerup",function(e){this.drawPlayerSummary(this.playerManager.players[0])},this),this.player2Button=new n(this,e/2-100,t-50,this.playerManager.players[1].name),this.player2Button.on("pointerup",function(e){this.drawPlayerSummary(this.playerManager.players[1])},this),this.playerManager.numPlayers>2&&(this.player3Button=new n(this,e/2+100,t-50,this.playerManager.players[2].name),this.player3Button.on("pointerup",function(e){this.drawPlayerSummary(this.playerManager.players[2])},this)),this.playerManager.numPlayers>3&&(this.player4Button=new n(this,e/2+300,t-50,this.playerManager.players[3].name),this.player4Button.on("pointerup",function(e){this.drawPlayerSummary(this.playerManager.players[3])},this)),this.backToStartButton=new n(this,e-150,50,"Back To Start"),this.backToStartButton.on("pointerup",function(e){this.backToStartScreen()},this)}drawPlayerSummary(e){this.clearPlayerSummary(),this.summary.setText(`${e.name}\n`+`Points: ${e.points}\n`+`Level 1 Cards: ${e.numLevel1Cards}\n`+`Level 2 Cards: ${e.numLevel2Cards}\n`+`Level 3 Cards: ${e.numLevel3Cards}\n`+`Total Rounds: ${this.playerManager.lastRound}`);let t=R.endScreen.card.x,s=R.endScreen.card.y,i=0;e.cardManager.cardJsonList.forEach(function(e){20===i&&(t=R.endScreen.card.x,s+=L.cardYDist,i=0),this.gameObjects.push(new E(this,{x:t,y:s},e)),t+=L.cardXDist,i++},this),t=R.endScreen.nobleX,s=this.summary.y+75,e.nobleManager.nobleJsonList.forEach(function(e){this.gameObjects.push(new A(this,{x:t,y:s},e)),t+=L.nobleXDist},this)}clearPlayerSummary(){this.summary.setText(""),this.gameObjects.forEach(function(e){e.destroy()})}backToStartScreen(){this.scene.start("RestartScreen")}}class V extends Phaser.Scene{constructor(){super({key:"RestartScreen",active:!1,visible:!1})}create(){game.restartGame()}}class O{constructor(e){this.players=e.players,this.numPlayers=e.players.length,this.pointsToWin=e.pointsToWin,this.currentPlayerIndex=0,this.currentRound=1,this.isLastRound=!1,this.lastRound=-1}getCurrentPlayer(){return this.players[this.currentPlayerIndex]}endTurn(){!this.isLastRound&&this.getCurrentPlayer().points>=this.pointsToWin&&(this.isLastRound=!0,this.lastRound=this.currentRound),this.currentPlayerIndex=(this.currentPlayerIndex+1)%this.numPlayers,0===this.currentPlayerIndex&&this.currentRound++}havePlayersFinishedLastRound(){return this.isLastRound&&-1!==this.lastRound&&this.lastRound<this.currentRound}getWinners(){let e=-1,t=-1,s=[];for(let i=0;i<this.players.length;i++)this.players[i].points>e?(e=this.players[i].points,t=this.players[i].numCards,s=[this.players[i]]):this.players[i].points===e&&(this.players[i].numCards<t?(t=this.players[i].numCards,s=[this.players[i]]):this.players[i].numCards===t&&s.push(this.players[i]));return s}}class F{constructor(e={black:0,white:0,red:0,green:0,blue:0,gold:0}){this.data=e}get black(){return this.data.black}get white(){return this.data.white}get red(){return this.data.red}get green(){return this.data.green}get blue(){return this.data.blue}get gold(){return this.data.gold}get total(){return this.black+this.white+this.red+this.green+this.blue+this.gold}addByJson(e){I.addColorJson(e,this.data)}removeByJson(e){I.subtractColorJson(e,this.data)}hasEnoughToGet(e,t=!0){let s=0;return e.black>0&&e.black>this.black&&(s+=e.black-this.black),e.white>0&&e.white>this.white&&(s+=e.white-this.white),e.red>0&&e.red>this.red&&(s+=e.red-this.red),e.green>0&&e.green>this.green&&(s+=e.green-this.green),e.blue>0&&e.blue>this.blue&&(s+=e.blue-this.blue),t?this.gold-s>=0:s<=0}getAmountToBuyUsingGoldIfRequired(e){const t={black:0,white:0,red:0,green:0,blue:0,gold:0};return e.black>0&&(t.black=Math.min(e.black,this.black),t.gold+=Math.max(e.black-this.black,0)),e.white>0&&(t.white=Math.min(e.white,this.white),t.gold+=Math.max(e.white-this.white,0)),e.red>0&&(t.red=Math.min(e.red,this.red),t.gold+=Math.max(e.red-this.red,0)),e.green>0&&(t.green=Math.min(e.green,this.green),t.gold+=Math.max(e.green-this.green,0)),e.blue>0&&(t.blue=Math.min(e.blue,this.blue),t.gold+=Math.max(e.blue-this.blue,0)),t}}class G{constructor(){this.cardJsonList=[]}get points(){let e=0;return this.cardJsonList.forEach(function(t){e+=t.points}),e}get black(){return this.getCountColor("black")}get white(){return this.getCountColor("white")}get red(){return this.getCountColor("red")}get green(){return this.getCountColor("green")}get blue(){return this.getCountColor("blue")}get numLevel1(){let e=0;return this.cardJsonList.forEach(function(t){1===t.level&&e++}),e}get numLevel2(){let e=0;return this.cardJsonList.forEach(function(t){2===t.level&&e++}),e}get numLevel3(){let e=0;return this.cardJsonList.forEach(function(t){3===t.level&&e++}),e}get total(){return this.cardJsonList.length}getCountColor(e){let t=0;return this.cardJsonList.forEach(function(s){s.color===e&&t++}),t}add(e){this.cardJsonList.push(e)}remove(e){let t=0;for(t=0;t<this.cardJsonList.length&&this.cardJsonList[t]!==e;t++);this.cardJsonList.splice(t,1)}hasEnoughToGet(e){let t=0;return e.black>0&&e.black>this.black&&(t+=e.black-this.black),e.white>0&&e.white>this.white&&(t+=e.white-this.white),e.red>0&&e.red>this.red&&(t+=e.red-this.red),e.green>0&&e.green>this.green&&(t+=e.green-this.green),e.blue>0&&e.blue>this.blue&&(t+=e.blue-this.blue),t<=0}getRemainingCost(e){return{black:Math.max(e.black-this.black,0),white:Math.max(e.white-this.white,0),red:Math.max(e.red-this.red,0),green:Math.max(e.green-this.green,0),blue:Math.max(e.blue-this.blue,0),gold:e.gold}}}class H{constructor(){this.nobleJsonList=[]}get points(){let e=0;return this.nobleJsonList.forEach(function(t){e+=t.points}),e}add(e){this.nobleJsonList.push(e)}}class Y{constructor(e){this.name=e,this.cardManager=new G,this.reserveCardManager=new G,this.nobleManager=new H,this.chipManager=new F({black:0,white:0,red:0,green:0,blue:0,gold:0})}get points(){return this.cardManager.points+this.nobleManager.points}get chips(){return this.chipManager.data}get numChips(){return this.chipManager.total}get numGoldChips(){return this.chipManager.gold}get numCards(){return this.cardManager.total}get numReserveCards(){return this.reserveCardManager.total}get numLevel1Cards(){return this.cardManager.numLevel1}get numLevel2Cards(){return this.cardManager.numLevel2}get numLevel3Cards(){return this.cardManager.numLevel3}buyCard(e,t=null){if(!this.canBuy(e))return null;let s=null;if(!this.cardManager.hasEnoughToGet(e.cardJson.cost))if(null!==t)s=this.cardManager.getRemainingCost(t);else{const t=this.cardManager.getRemainingCost(e.cardJson.cost);s=this.chipManager.hasEnoughToGet(t,!1)?t:this.chipManager.getAmountToBuyUsingGoldIfRequired(t)}return this.chipManager.removeByJson(s),this.cardManager.add(e.cardJson),this.isReserved(e)&&this.reserveCardManager.remove(e.cardJson),s}canBuy(e){const t=this.cardManager.getRemainingCost(e.cardJson.cost);return this.cardManager.hasEnoughToGet(e.cardJson.cost)||this.chipManager.hasEnoughToGet(t)}canBuyMultipleWaysWithChips(e){if(!this.canBuy(e))return!1;if(this.cardManager.hasEnoughToGet(e.cardJson.cost))return!1;const t=this.cardManager.getRemainingCost(e.cardJson.cost);return this.chipManager.hasEnoughToGet(t,!1)&&this.numGoldChips>0}canReserve(){return this.reserveCardManager.total<3}isReserved(e){for(let t=0;t<this.reserveCardManager.cardJsonList.length;t++)if(e.cardJson.cost===this.reserveCardManager.cardJsonList[t].cost)return!0;return!1}returnChips(e){this.chipManager.removeByJson(I.convertChipsToColorJson(e))}isOverChipLimit(e){return e<0?(console.log("Error: numChips is an invalid value: "+e),this.numChips>10):this.numChips+e>10}numOverChipLimit(e){return e<0?(console.log("Error: numChips is an invalid value: "+e),this.numChips-10):this.numChips+e-10}takeChip(e){this.chipManager.addByJson(I.convertChipsToColorJson([e]))}takeChips(e){this.chipManager.addByJson(I.convertChipsToColorJson(e))}reserveCard(e){this.reserveCardManager.add(e.cardJson)}getReserveCardJson(e){return e+1<=this.numReserveCards?this.reserveCardManager.cardJsonList[e]:null}canTakeNoble(e){return this.cardManager.hasEnoughToGet(e.nobleJson.cost)}addNoble(e){this.nobleManager.add(e.nobleJson)}}const W={chipRadius:30,chipStroke:2,chipStrokeOver:4,innerCircleRadius:24,symbolShapeData:[0,20,5,15,15,15,20,20,10,30],symbolLine1:[8,15,5,20,10,30,15,20,12,15],symbolLine2:[0,20,20,20],symbolScale:1.3,symbolStroke:1.5,goldSymbolRadius:15};class U extends Phaser.GameObjects.Container{constructor(e,t,s){super(e,t.x,t.y),this.color=s,this.circle=null,this.draw(),this.addInputs(),this.setInteractive(new Phaser.Geom.Circle(0,0,W.chipRadius),Phaser.Geom.Circle.Contains),e.add.existing(this)}get coordinates(){return{x:this.x,y:this.y}}draw(){const e=I.getColorCode(this.color);this.circle=this.scene.add.circle(0,0,W.chipRadius,e),this.circle.setStrokeStyle(W.chipStroke,i.black),this.add(this.circle);const t=this.scene.add.circle(0,0,W.innerCircleRadius,i.darkGray,128);t.setStrokeStyle(W.chipStroke,i.black),this.add(t),e===i.gold?this.drawGoldSymbol(this.circle.x,this.circle.y,e):this.drawSymbol(this.circle.x,this.circle.y,e)}drawSymbol(e,t,s){const r=this.scene.add.polygon(e,t,W.symbolShapeData,s);r.setScale(W.symbolScale),r.y-=r.displayHeight,r.setStrokeStyle(W.symbolStroke,i.black),this.add(r)}drawGoldSymbol(e,t,s){const r=this.scene.add.star(e,t,5,W.goldSymbolRadius/2,W.goldSymbolRadius,s);r.setStrokeStyle(W.symbolStroke,i.black),this.add(r)}addInputs(){this.removeInputs(),this.on("pointerover",this.over,this),this.on("pointerout",this.out,this),this.on("pointerup",this.up,this)}removeInputs(){this.off("pointerover"),this.off("pointerout"),this.off("pointerup")}over(e,t,s,r){this.circle.setStrokeStyle(W.chipStrokeOver,i.black)}out(e,t){this.circle.setStrokeStyle(W.chipStroke,i.black)}up(e,t,s,i){this.scene.events.emit("clickChip",this)}}class N extends Phaser.Scene{constructor(){super({key:"Board",active:!1,visible:!1}),this.gameData=null,this.cards=null,this.cardJsonDeck1=[],this.cardJsonDeck2=[],this.cardJsonDeck3=[],this.blackChip=null,this.whiteChip=null,this.redChip=null,this.greenChip=null,this.blueChip=null,this.goldChip=null,this.chipManager=null,this.nobles=null,this.InGameMenu=null,this.playerManager=null,this.chipCountText={black:null,white:null,red:null,green:null,blue:null,gold:null}}init(e){this.gameData=e}preload(){this.InGameMenu=this.scene.get("InGameMenu"),this.scene.sendToBack("InGameMenu"),this.PlayerInfoPane=this.scene.get("PlayerInfoPane"),this.cache.json.remove("cardJsonLevel1"),this.cache.json.remove("cardJsonLevel2"),this.cache.json.remove("cardJsonLevel3"),this.cache.json.remove("nobleJson"),this.load.path="src/assets/",this.load.json("cardJsonLevel1","json/cardData1.json"),this.load.json("cardJsonLevel2","json/cardData2.json"),this.load.json("cardJsonLevel3","json/cardData3.json"),this.load.json("nobleJson","json/nobleTileData.json")}create(){this.cardJsonDeck1=I.shuffleList(this.cache.json.get("cardJsonLevel1").data),this.cardJsonDeck2=I.shuffleList(this.cache.json.get("cardJsonLevel2").data),this.cardJsonDeck3=I.shuffleList(this.cache.json.get("cardJsonLevel3").data),this.cards=this.add.group(),this.drawCard(R.card3x0,3,!1),this.drawCard(R.card3x1,3),this.drawCard(R.card3x2,3),this.drawCard(R.card3x3,3),this.drawCard(R.card3x4,3),this.drawCard(R.card2x0,2,!1),this.drawCard(R.card2x1,2),this.drawCard(R.card2x2,2),this.drawCard(R.card2x3,2),this.drawCard(R.card2x4,2),this.drawCard(R.card1x0,1,!1),this.drawCard(R.card1x1,1),this.drawCard(R.card1x2,1),this.drawCard(R.card1x3,1),this.drawCard(R.card1x4,1);let e=7,t=5;switch(this.gameData.names.length){case 3:e=5,t=4;break;case 2:e=4,t=3;break;case 4:default:e=7,t=5}this.chipManager=new F,this.chipManager.addByJson({black:e,white:e,red:e,green:e,blue:e,gold:5}),this.drawChips(),this.drawChipCountText();const s=I.shuffleList(this.cache.json.get("nobleJson").data),i=[R.noble.pos0,R.noble.pos1,R.noble.pos2,R.noble.pos3,R.noble.pos4];this.nobles=this.add.group();for(let e=0;e<t;e++)this.nobles.add(new A(this,i[e],s[e]));const r=[];for(let e=0;e<this.gameData.names.length;e++)r.push(new Y(this.gameData.names[e]));this.playerManager=new O({players:r,pointsToWin:this.gameData.pointsToWin}),this.scene.launch("PlayerInfoPane",{playerManager:this.playerManager}),this.scene.launch("InGameMenu",{playerManager:this.playerManager}),this.events.on("clickCard",this.clickCard,this),this.events.on("clickChip",this.clickChip,this),this.events.on("buyCard",this.buyCard,this),this.events.on("takeChips",this.takeChips,this),this.events.on("takeAndReturnChips",this.takeAndReturnChips,this),this.events.on("reserveCard",this.reserveCard,this),this.events.on("reserveCardAndReturnChips",this.reserveCardAndReturnChips,this),this.events.on("endTurn",this.endTurn,this),this.events.on("enableBoard",this.enableBoard,this),this.events.on("disableBoard",this.disableBoard,this),this.events.on("disableChips",this.disableChips,this),this.events.on("disableShortStackChips",this.disableShortStackChips,this)}drawChips(){this.blackChip=new U(this,R.chip.black,"black"),this.whiteChip=new U(this,R.chip.white,"white"),this.redChip=new U(this,R.chip.red,"red"),this.greenChip=new U(this,R.chip.green,"green"),this.blueChip=new U(this,R.chip.blue,"blue");const e=new U(this,R.chip.gold,"gold");e.removeInputs(),this.goldChip=e}drawChipCountText(){this.chipCountText.black=this.add.text(R.chipCount.black.x,R.chipCount.black.y,"",r.menuText),this.chipCountText.white=this.add.text(R.chipCount.white.x,R.chipCount.white.y,"",r.menuText),this.chipCountText.red=this.add.text(R.chipCount.red.x,R.chipCount.red.y,"",r.menuText),this.chipCountText.green=this.add.text(R.chipCount.green.x,R.chipCount.green.y,"",r.menuText),this.chipCountText.blue=this.add.text(R.chipCount.blue.x,R.chipCount.blue.y,"",r.menuText),this.chipCountText.gold=this.add.text(R.chipCount.gold.x,R.chipCount.gold.y,"",r.menuText),this.chipCountText.black.setOrigin(.5),this.chipCountText.white.setOrigin(.5),this.chipCountText.red.setOrigin(.5),this.chipCountText.green.setOrigin(.5),this.chipCountText.blue.setOrigin(.5),this.chipCountText.gold.setOrigin(.5)}get currentPlayer(){return this.playerManager.getCurrentPlayer()}endTurn(){this.takeNobleIfEligible(),this.playerManager.endTurn(),this.PlayerInfoPane.events.emit("updatePlayerInfoPane"),this.playerManager.isLastRound&&this.PlayerInfoPane.events.emit("isLastRound"),this.InGameMenu.events.emit("setDefaultMenuText"),this.playerManager.havePlayersFinishedLastRound()&&(this.scene.stop("Board"),this.scene.stop("PlayerInfoPane"),this.scene.stop("InGameMenu"),this.scene.start("EndScreen",{playerManager:this.playerManager}))}clickCard(e){this.InGameMenu.events.emit("addCardToMenu",e)}clickChip(e){this.InGameMenu.events.emit("addChipToMenu",e)}buyCard(e,t=null){const s=this.currentPlayer.isReserved(e),i=this.currentPlayer.buyCard(e,t);null!==i&&this.addChipsByJson(i),s||(this.drawCard(e.startCoordinates,e.cardJson.level),this.removeCard(e)),this.endTurn()}takeChips(e){this.currentPlayer.takeChips(e),this.removeChips(e),this.endTurn()}takeAndReturnChips(e,t){this.currentPlayer.takeChips(e),this.removeChips(e),this.currentPlayer.returnChips(t),this.addChipsByJson(I.convertChipsToColorJson(t)),this.endTurn()}reserveCard(e){this.currentPlayer.reserveCard(e),this.drawCard(e.startCoordinates,e.cardJson.level,e.isFaceUp),this.removeCard(e),this.chipManager.gold>0&&(this.currentPlayer.takeChip(this.goldChip),this.removeChip(this.goldChip)),this.endTurn()}reserveCardAndReturnChips(e,t,s){this.currentPlayer.reserveCard(e),this.drawCard(e.startCoordinates,e.cardJson.level,e.isFaceUp),this.removeCard(e),this.currentPlayer.takeChips(t),this.removeChips(t),this.currentPlayer.returnChips(s),this.addChipsByJson(I.convertChipsToColorJson(s)),this.endTurn()}takeNobleIfEligible(){let e=0;const t=[];this.nobles.getChildren().forEach(function(s){this.currentPlayer.canTakeNoble(s)&&(e++,t.push(s))},this),1===e?(this.currentPlayer.addNoble(t[0]),this.nobles.remove(t[0],!0,!0)):e>1&&(this.currentPlayer.addNoble(t[0]),this.nobles.remove(t[0],!0,!0))}disableBoard(){this.disableChips("all"),this.cards.getChildren().forEach(function(e){e.removeInputs()})}enableBoard(){this.enableChips("all"),this.cards.getChildren().forEach(function(e){e.addInputs()})}disableChips(e){"black"!==e&&"all"!==e||this.blackChip.removeInputs(),"white"!==e&&"all"!==e||this.whiteChip.removeInputs(),"red"!==e&&"all"!==e||this.redChip.removeInputs(),"green"!==e&&"all"!==e||this.greenChip.removeInputs(),"blue"!==e&&"all"!==e||this.blueChip.removeInputs()}disableShortStackChips(e){"black"===e&&this.chipManager.black<4?this.blackChip.removeInputs():"white"===e&&this.chipManager.white<4?this.whiteChip.removeInputs():"red"===e&&this.chipManager.red<4?this.redChip.removeInputs():"green"===e&&this.chipManager.green<4?this.greenChip.removeInputs():"blue"===e&&this.chipManager.blue<4&&this.blueChip.removeInputs()}enableChips(e){"black"!==e&&"all"!==e||this.blackChip.addInputs(),"white"!==e&&"all"!==e||this.whiteChip.addInputs(),"red"!==e&&"all"!==e||this.redChip.addInputs(),"green"!==e&&"all"!==e||this.greenChip.addInputs(),"blue"!==e&&"all"!==e||this.blueChip.addInputs()}drawCard(e,t,s=!0){let i=null;1===t&&this.cardJsonDeck1.length>0?i=this.cardJsonDeck1.pop():2===t&&this.cardJsonDeck2.length>0?i=this.cardJsonDeck2.pop():3===t&&this.cardJsonDeck3.length>0&&(i=this.cardJsonDeck3.pop()),null===i?this.cards.getChildren().forEach(function(s){s.isFaceUp||(1===t&&s.coordinates.x===R.card1x0.x&&s.coordinates.y===R.card1x0.y?(s.x=e.x,s.y=e.y,s.flipCard()):2===t&&s.coordinates.x===R.card2x0.x&&s.coordinates.y===R.card2x0.y?(s.x=e.x,s.y=e.y,s.flipCard()):3===t&&s.coordinates.x===R.card3x0.x&&s.coordinates.y===R.card3x0.y&&(s.x=e.x,s.y=e.y,s.flipCard()))},this):this.cards.add(new E(this,e,i,s))}removeCard(e){this.cards.remove(e,!0,!0)}addChipsByJson(e){I.addColorJson(e,this.chipManager.data)}removeChips(e){I.subtractChipsToColorJson(e,this.chipManager.data)}removeChip(e){I.subtractChipsToColorJson([e],this.chipManager.data)}update(){this.updateChips()}updateChips(){const e=I.convertChipsToColorJson(this.InGameMenu.chips);this.blackChip.setVisible(this.chipManager.black-e.black!=0),this.whiteChip.setVisible(this.chipManager.white-e.white!=0),this.redChip.setVisible(this.chipManager.red-e.red!=0),this.greenChip.setVisible(this.chipManager.green-e.green!=0),this.blueChip.setVisible(this.chipManager.blue-e.blue!=0),this.goldChip.setVisible(this.chipManager.gold-e.gold!=0),this.chipCountText.black.setText(`x ${this.chipManager.black-e.black}`),this.chipCountText.white.setText(`x ${this.chipManager.white-e.white}`),this.chipCountText.red.setText(`x ${this.chipManager.red-e.red}`),this.chipCountText.green.setText(`x ${this.chipManager.green-e.green}`),this.chipCountText.blue.setText(`x ${this.chipManager.blue-e.blue}`),this.chipCountText.gold.setText(`x ${this.chipManager.gold-e.gold}`)}get chipCountNoGold(){return this.chipManager.black+this.chipManager.white+this.chipManager.red+this.chipManager.green+this.chipManager.blue}get chipColorCountNoGold(){let e=0;return this.chipManager.black>0&&e++,this.chipManager.white>0&&e++,this.chipManager.red>0&&e++,this.chipManager.green>0&&e++,this.chipManager.blue>0&&e++,e}}const j={EMPTY:"EMPTY",BUY_OR_RESERVE_CARD:"BUY_OR_RESERVE_CARD",RESERVE_CARD:"RESERVE_CARD",BUY_CARD_SWAP_CHIPS:"BUY_CARD_SWAP_CHIPS",BUY_CARD_SWAP_CHIPS_REPLACED:"BUY_CARD_SWAP_CHIPS_REPLACED",ADDING_CHIP:"ADDING_CHIP",TAKE_CHIPS:"TAKE_CHIPS",OVER_CHIP_LIMIT:"OVER_CHIP_LIMIT",OVER_CHIP_LIMIT_RETURN_CHIPS:"OVER_CHIP_LIMIT_RETURN_CHIPS",BUY_RESERVE_CARD:"BUY_RESERVE_CARD"},$={borderWidth:750,borderHeight:200,borderX:225,borderY:430,borderStroke:2};class X extends Phaser.Scene{constructor(){super({key:"InGameMenu",active:!1,visible:!1}),this.chips=[],this.card=null,this.isReserved=!1,this.customCost={black:0,white:0,red:0,green:0,blue:0,gold:0},this.returnChips=[],this.blackChip=null,this.whiteChip=null,this.redChip=null,this.greenChip=null,this.blueChip=null,this.goldChip=null,this.chipCountText={black:null,white:null,red:null,green:null,blue:null,gold:null},this.rect=null,this.menuText=null,this.button1=null,this.button2=null,this.cancelButton=null,this.skipTurnButton=null,this.tween1=null,this.tween2=null,this.tween3=null,this.Board=null,this.playerManager=null,this.state=null}init(e){this.playerManager=e.playerManager}preload(){this.Board=this.scene.get("Board")}create(){this.events.on("addCardToMenu",this.addCardToMenu,this),this.events.on("addChipToMenu",this.addChipToMenu,this),this.events.on("addReserveCardToMenu",this.addReserveCardToMenu,this),this.events.on("clickChip",this.clickChip,this),this.events.on("setDefaultMenuText",this.setDefaultMenuText,this),this.drawWindow(),this.updateBoardAndMenu(j.EMPTY)}get currentPlayer(){return this.playerManager.getCurrentPlayer()}drawWindow(){this.rect=this.add.rectangle(0,0,$.borderWidth,$.borderHeight),this.rect.setStrokeStyle($.borderStroke,i.black),this.rect.setFillStyle(i.menu,1),this.rect.setOrigin(0),this.rect.x=R.inGameMenu.x,this.rect.y=R.inGameMenu.y,this.button1=new n(this,this.rect.x+this.rect.width-100,this.rect.y+this.rect.height/5,""),this.button2=new n(this,this.rect.x+this.rect.width-100,this.rect.y+2*this.rect.height/5,""),this.cancelButton=new n(this,this.rect.x+this.rect.width-100,this.rect.y+3*this.rect.height/5,"Cancel"),this.skipTurnButton=new n(this,this.rect.x+this.rect.width-100,this.rect.y+4*this.rect.height/5,""),this.skipTurnButton.setVisible(!0),this.skipTurnButton.setText("Skip Turn"),this.skipTurnButton.on("pointerup",function(e){this.updateBoardAndMenu(j.EMPTY),this.Board.events.emit("endTurn")},this),this.cancelButton.on("pointerup",function(e){this.updateBoardAndMenu(j.EMPTY)},this),this.menuText=this.add.text(this.rect.x+120,this.rect.y+20,"",r.menuText)}updateBoardAndMenu(e){switch(this.state=e,e){case j.EMPTY:this.Board.events.emit("enableBoard"),this.undoAndRemoveTweens(),null!==this.card&&(this.card.addInputs(),this.isReserved&&this.card.destroy(),this.card=null),this.chips.length>0&&(this.chips.forEach(function(e){e.destroy()}),this.chips.length=0),this.customCost={black:0,white:0,red:0,green:0,blue:0,gold:0},this.returnChips.length=0,this.removeChipsFromMenu(),this.isReserved=!1;break;case j.BUY_OR_RESERVE_CARD:case j.RESERVE_CARD:this.addTween(0,this.card);break;case j.BUY_CARD_SWAP_CHIPS:const t=this.currentPlayer.cardManager.getRemainingCost(this.card.cardJson.cost);this.customCost=t,this.addChipsToMenu(t);break;case j.BUY_CARD_SWAP_CHIPS_REPLACED:this.updateCustomCostChipInputAndCount();break;case j.ADDING_CHIP:1===this.chips.length?(this.addTween(0,this.chips[0]),this.Board.events.emit("disableShortStackChips",this.chips[0].color)):2===this.chips.length?(this.addTween(1,this.chips[1]),this.Board.events.emit("disableChips",this.chips[0].color),this.Board.events.emit("disableChips",this.chips[1].color)):3===this.chips.length&&(this.addTween(2,this.chips[2]),this.Board.events.emit("disableChips","all"));break;case j.TAKE_CHIPS:this.Board.events.emit("disableChips","all");break;case j.OVER_CHIP_LIMIT:null===this.card&&this.chips.forEach(function(e){e.setVisible(!1)}),this.addChipsToMenu(this.currentPlayer.chips);break;case j.OVER_CHIP_LIMIT_RETURN_CHIPS:this.updateReturningChipInputAndCount();break;case j.BUY_RESERVE_CARD:break;default:console.log(`Unhandled State ${this.state}: updateBoardAndMenu`)}this.updateMenuTextAndButtons()}updateMenuTextAndButtons(){switch(this.setDefaultMenuText(),this.state){case j.EMPTY:this.button1.setVisible(!1),this.button2.setVisible(!1),this.cancelButton.setVisible(!1);break;case j.BUY_OR_RESERVE_CARD:this.button1.setVisible(!0),this.button2.setVisible(!0),this.setToBuyCardButton(this.button1),this.setToReserveCardButton(this.button2),this.cancelButton.setVisible(!0);break;case j.RESERVE_CARD:this.button1.setVisible(!0),this.setToReserveCardButton(this.button1),this.cancelButton.setVisible(!0);break;case j.BUY_CARD_SWAP_CHIPS:case j.BUY_CARD_SWAP_CHIPS_REPLACED:const e=this.currentPlayer.numGoldChips-this.customCost.gold;let t=`${this.currentPlayer.numGoldChips} gold chips`;1===this.currentPlayer.numGoldChips&&(t="1 gold chip"),this.menuText.setText(`You have ${t}. Click the chip you want `+`to replace with a gold chip (${e} left).`),this.button1.setVisible(!0),this.button2.setVisible(!0),this.setToConfirmBuyButton(this.button1),this.setToDoNotUseGoldButton(this.button2),this.cancelButton.setVisible(!0);break;case j.ADDING_CHIP:this.button1.setVisible(!1),this.button2.setVisible(!1),this.cancelButton.setVisible(!0);break;case j.TAKE_CHIPS:this.button1.setVisible(!0),this.setToTakeChipButton(this.button1),this.button2.setVisible(!1),this.cancelButton.setVisible(!0);break;case j.OVER_CHIP_LIMIT:case j.OVER_CHIP_LIMIT_RETURN_CHIPS:const s=this.currentPlayer.numOverChipLimit(Math.abs(this.chips.length-this.returnChips.length));1===s?this.menuText.setText("You are 1 chip over the limit. Click on the chip you want to return."):s>1?this.menuText.setText(`You are ${s} chips over the limit. Click on the chips you want to return.`):this.menuText.setText("Click Return to return your selected chips."),this.button1.setVisible(!0),this.setToReturnChipsButton(this.button1),this.button2.setVisible(!1),this.cancelButton.setVisible(!0);break;case j.BUY_RESERVE_CARD:this.button1.setVisible(!0),this.button2.setVisible(!1),this.setToBuyCardButton(this.button1),this.cancelButton.setVisible(!0);break;default:console.log(`Unhandled State ${this.state}: updateMenuTextAndButtons`)}}setDefaultMenuText(){let e=`Round ${this.playerManager.currentRound}`;this.playerManager.isLastRound&&(e+=" (LAST ROUND)"),this.menuText.setText(`${e}: ${this.currentPlayer.name}, it's your turn.`)}setToTakeChipButton(e){e.removeAllListeners(),e.on("pointerup",this.takeChips,this),e.setText("Take"),e.setDisabled(!1)}setToReturnChipsButton(e){e.removeAllListeners(),e.setText("Return");const t=this.currentPlayer.isOverChipLimit(Math.abs(this.chips.length-this.returnChips.length));e.setDisabled(t),t||e.on("pointerup",this.takeAndReturnChips,this)}setToBuyCardButton(e){e.removeAllListeners(),e.setText("Buy"),e.setDisabled(!this.currentPlayer.canBuy(this.card)),this.currentPlayer.canBuy(this.card)&&e.on("pointerup",this.buyCard,this)}setToReserveCardButton(e){e.removeAllListeners(),e.setText("Reserve"),e.setDisabled(!this.currentPlayer.canReserve()),this.currentPlayer.canReserve()&&e.on("pointerup",this.reserveCard,this)}setToDoNotUseGoldButton(e){e.removeAllListeners(),e.setText("Don't Use Gold"),e.setDisabled(!1),e.on("pointerup",this.buyCardNoGold,this)}setToConfirmBuyButton(e){e.removeAllListeners(),e.setText("Confirm"),e.setDisabled(0===this.currentPlayer.numGoldChips||0===this.customCost.gold),this.customCost.gold>0&&e.on("pointerup",this.buyCardCustomCost,this)}buyCard(e){this.currentPlayer.canBuyMultipleWaysWithChips(this.card)?this.updateBoardAndMenu(j.BUY_CARD_SWAP_CHIPS):(this.Board.events.emit("buyCard",this.card),this.updateBoardAndMenu(j.EMPTY))}buyCardNoGold(e){this.Board.events.emit("buyCard",this.card,this.card.cardJson.cost),this.updateBoardAndMenu(j.EMPTY)}buyCardCustomCost(e){this.Board.events.emit("buyCard",this.card,this.customCost),this.updateBoardAndMenu(j.EMPTY)}reserveCard(e){if(this.Board.chipManager.gold>0&&this.currentPlayer.isOverChipLimit(1)){const e=new U(this,this.Board.goldChip.coordinates,this.Board.goldChip.color);return e.removeInputs(),this.chips.push(e),void this.updateBoardAndMenu(j.OVER_CHIP_LIMIT)}this.Board.events.emit("reserveCard",this.card),this.updateBoardAndMenu(j.EMPTY)}takeChips(e){this.currentPlayer.isOverChipLimit(this.chips.length)?this.updateBoardAndMenu(j.OVER_CHIP_LIMIT):(this.Board.events.emit("takeChips",this.chips),this.updateBoardAndMenu(j.EMPTY))}takeAndReturnChips(e){null!==this.card?this.Board.events.emit("reserveCardAndReturnChips",this.card,this.chips,this.returnChips):this.Board.events.emit("takeAndReturnChips",this.chips,this.returnChips),this.updateBoardAndMenu(j.EMPTY)}addCardToMenu(e){this.updateBoardAndMenu(j.EMPTY),this.card=e,e.removeInputs(),this.card.isFaceUp?this.updateBoardAndMenu(j.BUY_OR_RESERVE_CARD):this.updateBoardAndMenu(j.RESERVE_CARD)}addChipToMenu(e){null===this.card&&this.state!==j.OVER_CHIP_LIMIT&&this.state!==j.OVER_CHIP_LIMIT_RETURN_CHIPS||this.updateBoardAndMenu(j.EMPTY);const t=new U(this,e.coordinates,e.color);this.chips.push(t),t.removeInputs(),this.updateBoardAndMenu(j.ADDING_CHIP),this.canTakeChips()&&this.updateBoardAndMenu(j.TAKE_CHIPS)}addReserveCardToMenu(e){this.updateBoardAndMenu(j.EMPTY);const t={x:R.cardPos.x,y:this.rect.y+this.rect.height/2};this.card=new E(this,t,e),this.card.removeInputs(),this.isReserved=!0,this.updateBoardAndMenu(j.BUY_RESERVE_CARD)}canTakeChips(){return 3===this.chips.length||2===this.chips.length&&this.chips[0].color===this.chips[1].color||this.chips.length===this.Board.chipColorCountNoGold||this.Board.chipCountNoGold===this.chips.length}clickChip(e){switch(this.state){case j.EMPTY:case j.BUY_OR_RESERVE_CARD:case j.RESERVE_CARD:case j.ADDING_CHIP:case j.TAKE_CHIPS:case j.BUY_RESERVE_CARD:break;case j.BUY_CARD_SWAP_CHIPS:case j.BUY_CARD_SWAP_CHIPS_REPLACED:I.subtractChipsToColorJson([e],this.customCost),this.customCost.gold++,this.updateBoardAndMenu(j.BUY_CARD_SWAP_CHIPS_REPLACED);break;case j.OVER_CHIP_LIMIT:case j.OVER_CHIP_LIMIT_RETURN_CHIPS:this.returnChips.push(e),this.updateBoardAndMenu(j.OVER_CHIP_LIMIT_RETURN_CHIPS);break;default:console.log(`Unhandled State ${this.state}: clickChip`)}}addChipsToMenu(e){const t=I.copyColorJson(e);I.addChipsToColorJson(this.chips,t);const s=[R.chipMenu.pos0,R.chipMenu.pos1,R.chipMenu.pos2,R.chipMenu.pos3,R.chipMenu.pos4,R.chipMenu.pos5],i=[R.chipMenuCount.pos0,R.chipMenuCount.pos1,R.chipMenuCount.pos2,R.chipMenuCount.pos3,R.chipMenuCount.pos4,R.chipMenuCount.pos5];let r=0;null===this.blackChip&&t.black>0&&(this.blackChip=new U(this,s[r],"black"),this.chipCountText.black=this.drawChipCountText(i[r++],t.black)),null===this.whiteChip&&t.white>0&&(this.whiteChip=new U(this,s[r],"white"),this.chipCountText.white=this.drawChipCountText(i[r++],t.white)),null===this.redChip&&t.red>0&&(this.redChip=new U(this,s[r],"red"),this.chipCountText.red=this.drawChipCountText(i[r++],t.red)),null===this.greenChip&&t.green>0&&(this.greenChip=new U(this,s[r],"green"),this.chipCountText.green=this.drawChipCountText(i[r++],t.green)),null===this.blueChip&&t.blue>0&&(this.blueChip=new U(this,s[r],"blue"),this.chipCountText.blue=this.drawChipCountText(i[r++],t.blue)),null===this.goldChip&&t.gold>0&&(this.goldChip=new U(this,s[r],"gold"),this.chipCountText.gold=this.drawChipCountText(i[r++],t.gold)),this.state===j.BUY_CARD_SWAP_CHIPS&&(this.goldChip=new U(this,R.chipMenu.pos5,"gold"),this.goldChip.removeInputs(),this.chipCountText.gold=this.drawChipCountText(R.chipMenuCount.pos5,this.customCost.gold))}updateCustomCostChipInputAndCount(){if(this.state!==j.BUY_CARD_SWAP_CHIPS_REPLACED)return;const e=this.customCost.gold===this.currentPlayer.numGoldChips;null!==this.chipCountText.black&&this.chipCountText.black.setText(this.customCost.black),null!==this.chipCountText.white&&this.chipCountText.white.setText(this.customCost.white),null!==this.chipCountText.red&&this.chipCountText.red.setText(this.customCost.red),null!==this.chipCountText.green&&this.chipCountText.green.setText(this.customCost.green),null!==this.chipCountText.blue&&this.chipCountText.blue.setText(this.customCost.blue),null!==this.chipCountText.gold&&this.chipCountText.gold.setText(this.customCost.gold),null===this.blackChip||!e&&0!==this.customCost.black||this.blackChip.removeInputs(),null===this.whiteChip||!e&&0!==this.customCost.white||this.whiteChip.removeInputs(),null===this.redChip||!e&&0!==this.customCost.red||this.redChip.removeInputs(),null===this.greenChip||!e&&0!==this.customCost.green||this.greenChip.removeInputs(),null===this.blueChip||!e&&0!==this.customCost.blue||this.blueChip.removeInputs()}updateReturningChipInputAndCount(){if(this.state!==j.OVER_CHIP_LIMIT_RETURN_CHIPS)return;const e=I.convertChipsToColorJson(this.returnChips),t=I.copyColorJson(this.currentPlayer.chips);I.addChipsToColorJson(this.chips,t),null!==this.chipCountText.black&&this.chipCountText.black.setText(t.black-e.black),null!==this.chipCountText.white&&this.chipCountText.white.setText(t.white-e.white),null!==this.chipCountText.red&&this.chipCountText.red.setText(t.red-e.red),null!==this.chipCountText.green&&this.chipCountText.green.setText(t.green-e.green),null!==this.chipCountText.blue&&this.chipCountText.blue.setText(t.blue-e.blue),null!==this.chipCountText.gold&&this.chipCountText.gold.setText(t.gold-e.gold);const s=this.currentPlayer.isOverChipLimit(Math.abs(this.chips.length-this.returnChips.length));null===this.blackChip||s&&e.black!==t.black||this.blackChip.removeInputs(),null===this.whiteChip||s&&e.white!==t.white||this.whiteChip.removeInputs(),null===this.redChip||s&&e.red!==t.red||this.redChip.removeInputs(),null===this.greenChip||s&&e.green!==t.green||this.greenChip.removeInputs(),null===this.blueChip||s&&e.blue!==t.blue||this.blueChip.removeInputs(),null===this.goldChip||s&&e.gold!==t.gold||this.goldChip.removeInputs()}removeChipsFromMenu(){null!==this.blackChip&&(this.blackChip.destroy(!0),this.blackChip=null,this.chipCountText.black.destroy(!0),this.chipCountText.black=null),null!==this.whiteChip&&(this.whiteChip.destroy(!0),this.whiteChip=null,this.chipCountText.white.destroy(!0),this.chipCountText.white=null),null!==this.redChip&&(this.redChip.destroy(!0),this.redChip=null,this.chipCountText.red.destroy(!0),this.chipCountText.red=null),null!==this.greenChip&&(this.greenChip.destroy(!0),this.greenChip=null,this.chipCountText.green.destroy(!0),this.chipCountText.green=null),null!==this.blueChip&&(this.blueChip.destroy(!0),this.blueChip=null,this.chipCountText.blue.destroy(!0),this.chipCountText.blue=null),null!==this.goldChip&&(this.goldChip.destroy(!0),this.goldChip=null,this.chipCountText.gold.destroy(!0),this.chipCountText.gold=null)}drawChipCountText(e,t){const s=this.add.text(e.x,e.y,t,r.menuText);return s.setOrigin(.5),s}addTween(e,t){let s=R.cardPos;null===this.card&&(0===e?s=R.chipPos0:1===e?s=R.chipPos1:2===e&&(s=R.chipPos2));const i=this.tweens.add({targets:t,x:s.x,y:this.rect.y+this.rect.height/2,duration:250,ease:"Cubic",onStart:function(){this.scene.pause("Board"),null===this.card&&this.scene.bringToTop("InGameMenu"),t.setDepth(1)},onStartScope:this,onComplete:function(){this.scene.wake("Board"),null===this.card&&this.scene.sendToBack("InGameMenu"),t.setDepth(0)},onCompleteScope:this},this);0===e?this.tween1=i:1===e?this.tween2=i:2===e&&(this.tween3=i)}undoAndRemoveTweens(){null!==this.tween1&&(this.tween1.seek(0),this.tween1=null),null!==this.tween2&&(this.tween2.seek(0),this.tween2=null),null!==this.tween3&&(this.tween3.seek(0),this.tween3=null)}}const K={borderStroke:2,borderStrokeCurrentPlayer:4,borderWidth:250,borderHeight:135,cardStroke:2,chipRadius:16,chipStroke:2,pointsRadius:16,pointsStroke:2,reserveCardStrokeOut:2,reserveCardStrokeOver:4};class q extends Phaser.GameObjects.Container{constructor(e,t,s){super(e,t.x,t.y),this.player=s,this.chips=s.chipManager,this.cards=s.cardManager,this.reservedCards=s.reserveCardManager,this.playerInfo={black:null,white:null,red:null,green:null,blue:null,gold:null,points:null,reserve1:null,reserve2:null,reserve3:null},this.draw(),e.add.existing(this)}isCurrentPlayer(){return this.scene.currentPlayer.name===this.player.name}draw(){const e=[0,0,0,K.borderHeight,K.borderWidth,K.borderHeight,K.borderWidth,0];this.border=this.scene.add.polygon(0,0,e),this.border.setStrokeStyle(K.borderStroke,i.black),this.border.setFillStyle(i.menu,1),this.border.setOrigin(0,0),this.add(this.border);const t=this.scene.add.text(R.playerInfo.name.x,R.playerInfo.name.y,this.player.name,r.playerInfo.name);t.setOrigin(0,.5),this.add(t),this.playerInfo.black=this.drawCardAndChip(R.playerInfo.black,i.black),this.playerInfo.white=this.drawCardAndChip(R.playerInfo.white,i.white),this.playerInfo.red=this.drawCardAndChip(R.playerInfo.red,i.red),this.playerInfo.green=this.drawCardAndChip(R.playerInfo.green,i.green),this.playerInfo.blue=this.drawCardAndChip(R.playerInfo.blue,i.blue),this.playerInfo.gold=this.drawChip(R.playerInfo.gold,i.gold),this.playerInfo.points=this.drawPoints(R.playerInfo.points),this.playerInfo.reserve1=this.drawCard(R.playerInfo.reserve1,i.cardLevel1),this.playerInfo.reserve2=this.drawCard(R.playerInfo.reserve2,i.cardLevel2),this.playerInfo.reserve3=this.drawCard(R.playerInfo.reserve3,i.cardLevel3),this.updateInfo()}updateInfo(){this.updateCardAndChip(this.playerInfo.black,this.cards.black,this.chips.black),this.updateCardAndChip(this.playerInfo.white,this.cards.white,this.chips.white),this.updateCardAndChip(this.playerInfo.red,this.cards.red,this.chips.red),this.updateCardAndChip(this.playerInfo.green,this.cards.green,this.chips.green),this.updateCardAndChip(this.playerInfo.blue,this.cards.blue,this.chips.blue),this.updateChip(this.playerInfo.gold,this.chips.gold),this.updateReserveCard(this.playerInfo.reserve1,this.player.getReserveCardJson(0)),this.updateReserveCard(this.playerInfo.reserve2,this.player.getReserveCardJson(1)),this.updateReserveCard(this.playerInfo.reserve3,this.player.getReserveCardJson(2)),this.playerInfo.points.setText(this.player.points),this.isCurrentPlayer()?this.border.setStrokeStyle(K.borderStrokeCurrentPlayer,i.black):this.border.setStrokeStyle(K.borderStroke,i.black)}drawCard(e,t){const s=this.scene.add.text(e.x,e.y,"0",r.playerInfo.cost);s.setOrigin(.5),s.setPadding({left:2,top:1,right:2,bottom:1});const n=[0,0,0,s.height,s.width,s.height,s.width,0],h=this.scene.add.polygon(s.x,s.y,n,t);return h.setStrokeStyle(K.cardStroke,i.black),h.setInteractive(),this.add(h),this.add(s),{rect:h,cardText:s}}drawChip(e,t){const s=this.scene.add.circle(e.x,e.y,K.chipRadius+K.chipStroke,i.black),n=this.scene.add.circle(e.x,e.y,K.chipRadius,t),h=this.scene.add.text(n.x,n.y,"0",r.playerInfo.cost);return h.setOrigin(.5),this.add(s),this.add(n),this.add(h),{blackBorder:s,circle:n,chipText:h}}drawCardAndChip(e,t){const s=this.drawCard(e,t),i={x:s.cardText.x+s.cardText.width+.5,y:s.cardText.y},r=this.drawChip(i,t);return{rect:s.rect,cardText:s.cardText,blackBorder:r.blackBorder,circle:r.circle,chipText:r.chipText}}drawPoints(e){const t=this.scene.add.circle(e.x,e.y,K.pointsRadius+K.pointsStroke,i.black),s=this.scene.add.circle(t.x,t.y,K.pointsRadius,i.lightGray),n=this.scene.add.text(s.x,s.y,"0",r.playerInfo.points);return n.setOrigin(.5),this.add(t),this.add(s),this.add(n),n}updateCard(e,t){0===t?e.rect.setAlpha(.5):e.rect.setAlpha(1),e.cardText.setVisible(0!==t),e.cardText.setText(t)}updateReserveCard(e,t){if(null!==t){let s=i.cardLevel1;2===t.level?s=i.cardLevel2:3===t.level&&(s=i.cardLevel3),e.rect.setFillStyle(s),this.isCurrentPlayer()?this.addReserveCardInputs(e.rect,t):this.removeReserveCardInputs(e.rect)}e.rect.setVisible(null!==t),e.cardText.setVisible(!1)}updateChip(e,t){e.blackBorder.setVisible(0!==t),e.circle.setVisible(0!==t),e.chipText.setVisible(0!==t),e.chipText.setText(t)}updateCardAndChip(e,t,s){this.updateCard(e,t),this.updateChip(e,s)}addReserveCardInputs(e,t){this.removeReserveCardInputs(e),e.on("pointerover",this.over,e),e.on("pointerout",this.out,e),e.on("pointerup",function(e,s,i,r){this.scene.events.emit("clickReserveCard",t)},this)}removeReserveCardInputs(e){e.off("pointerover"),e.off("pointerout"),e.off("pointerup")}over(e,t,s,r){this.setStrokeStyle(K.reserveCardStrokeOver,i.black)}out(e,t){this.setStrokeStyle(K.reserveCardStrokeOut,i.black)}}class Q extends Phaser.Scene{constructor(){super({key:"PlayerInfoPane",active:!1,visible:!1}),this.playerManager=null,this.playerInfoList=[],this.InGameMenu=null}init(e){this.playerManager=e.playerManager,this.playerInfoList.length=0}preload(){this.InGameMenu=this.scene.get("InGameMenu")}create(){this.events.on("updatePlayerInfoPane",this.updatePlayerInfoPane,this),this.events.on("clickReserveCard",this.clickReserveCard,this);let e=0;this.playerManager.players.forEach(function(t){this.playerInfoList.push(new q(this,{x:R.window.x,y:R.window.y+e},t)),e+=R.playerInfo.yOffset},this)}get currentPlayer(){return this.playerManager.getCurrentPlayer()}updatePlayerInfoPane(){this.playerInfoList.forEach(function(e){e.updateInfo()},this)}clickReserveCard(e){this.InGameMenu.events.emit("addReserveCardToMenu",e)}}var z={title:"PhaserSplendor",type:Phaser.AUTO,parent:phaser,width:1024,height:640,scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.NO_CENTER},dom:{createContainer:!0},backgroundColor:i.board,disableContextMenu:!0,antialias:!0};class Z extends Phaser.Game{constructor(){super(z),this.scene.add("StartScreen",h),this.scene.add("Board",N),this.scene.add("PlayerInfoPane",Q),this.scene.add("InGameMenu",X),this.scene.add("EndScreen",J),this.scene.add("RestartScreen",V)}restartGame(){this.scene.remove("StartScreen",h),this.scene.remove("Board",N),this.scene.remove("PlayerInfoPane",Q),this.scene.remove("InGameMenu",X),this.scene.remove("EndScreen",J),this.scene.add("StartScreen",h),this.scene.add("Board",N),this.scene.add("PlayerInfoPane",Q),this.scene.add("InGameMenu",X),this.scene.add("EndScreen",J)}}window.onload=function(){window.game=new Z}}});